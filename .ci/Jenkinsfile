@Library('damkins') _

gitVars = [:]

def initGitVars() {
    gitVars = parseGitVars()
}

pipeline {
    agent {
        kubernetes {
            label getAgentLabel()
        }
    }

    options {
        disableConcurrentBuilds(abortPrevious: true)
    }

    environment {
        PATH = initTools()
    }

    stages {
        // stage('SonarQube Analysis') {
        //     steps {
        //         initGitVars()
        //         analyze()
        //     }
        // }

        // stage('Build Test Image') {
        //     steps {
        //         initGitVars()
        //         buildTestImage(
        //             buildID: env.BUILD_ID,
        //             repoName: gitVars.repoName,
        //         )
        //     }
        // }

        // stage('Build and Push Image') {
        //     when {
        //         expression {
        //             env.GIT_BRANCH ==~ /main/
        //         }
        //         beforeAgent true
        //     }

        //     steps {
        //         initGitVars()
        //         buildAndPushImage(
        //             buildID: env.BUILD_ID,
        //             repoName: gitVars.repoName,
        //             branchName: gitVars.branchName,
        //             commitHash: gitVars.commitHash,
        //         )
        //     }
        // }

        stage('Deployment Approval') {
            when {
                expression {
                    env.GIT_BRANCH ==~ /main/
                }
                beforeAgent true
            }

            steps {
                initGitVars()
                approveDeployment(
                    repoName: gitVars.repoName
                )
            }
        }

        stage('Experimental Deployment Execution') {
            steps {
                sh 'kubectl --version'
            }
        }

        // stage('Deployment Execution') {
        //     when {
        //         expression {
        //             env.GIT_BRANCH ==~ /main/
        //         }
        //         beforeAgent true
        //     }

        //     steps {
        //         initGitVars()
        //         executeDeployment(
        //             org: 'rafiandria23',
        //             repoName: gitVars.repoName,
        //             commitHash: gitVars.commitHash,
        //         )
        //     }
        // }
    }

    post {
        cleanup {
            cleanWs()
        }
    }
}
