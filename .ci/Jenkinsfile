pipeline {
  agent any

  stages {
    stage('SonarQube analysis') {
      steps {
        script {
          def scannerHome = tool 'SonarQube Scanner 4.8';

          withSonarQubeEnv('rafiandria23') {
            sh "${scannerHome}/bin/sonar-scanner"
          } // submitted SonarQube taskId is automatically attached to the pipeline context
        }
      }
    }

    // No need to occupy a node
    stage("Quality Gate"){
      steps {
        timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
          script {
            def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv

            if (qg.status != 'OK') {
              error "Pipeline aborted due to quality gate failure: ${qg.status}"
            }
          }
        }
      }
    }
  }
}
